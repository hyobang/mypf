* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}
li {
  list-style: none;
}
a {
  text-decoration: none;
  color: inherit;
}
.flex {
  display: flex;
}
img {
  vertical-align: top;
}

/* --------------------------------------------- */
header {
  background: rgb(0, 0, 0);
  background: linear-gradient(
    90deg,
    rgb(221, 214, 193) 0%,
    rgba(91, 91, 91, 1) 100%
  );
  width: 800px;
  height: 100vh;
  position: fixed;
  transform: skew(-40deg);
  left: -600px;
}
h1 img {
  width: 300px;
  transform: skew(40deg);
}

h1 {
    width: 300px;
  position: fixed;
  left: 300px;
  top: 40px;
}

nav {
  border: 1px solid #000;
  position: fixed;
  right: 0;
  top: 200px;
}

.main {
  background: #050505;
  color: #fff;
  width: 200px;
  text-align: center;
  position: relative;  
  z-index: 10;
}
/* 1. 기존 .main a에있는 position: relative를
.main으로 옮겨줌으로써 각 main의 옆으로 이동시키게한다.
아래 주석처리된 것을 해제해보면서 비교해보자. */
.main a {
  /* position: relative; */
  display: block;
  padding: 10px;
}
/* 3. 선택자 해석:.main에 호버했을 때 
.sub가 아래 속성을 갖는다. */
li.main:hover ul.sub {
  opacity: 1;
transform: translateX(200px
);
  transition: 0.35s;
  z-index: 10;
}
/* 2. sub와 main의 위치가 겹쳐서 호버할때 깜빡임 현상이
나타나게된다. 그래서 이를 해결하기위해
.sub에 left:-200px을 줌으로써 겹침을 방지한다.
허쌤 예시사이트에도 .sub를 왼쪽으로 빼놓았다. */
.sub {
  position: absolute;  
 transform: translateX(-1000px
 );
  background: #cfc7aa;
  width: 200px;
  top: 0;
  opacity: 0;
  z-index: 100;
  transition: 0.5s;
  z-index: 1;
}

.sub li:hover a{background: #fff;
font-weight: bold;}
.sub a {
  color: #000;
}
/* span은 인라인 요소이기 때문에
너비, 높이, 변형(transform)이 적용 되지않는다.
그래서 block 속성을 부여해서 원하는 값을 적용한다. */
.main a span{
    display: block;
    transform: skew(40deg);
}

.main a:hover{background: #fff;
    color: #000;
    font-weight: bold;}
/* ----------------------------------------------- */

figure {
  position: fixed;
  width: 100%;
  height: 100vh;
  z-index: -1;
}
video {
  width: 100%;
}
